# Generated by Django 5.2.6 on 2025-09-20 10:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_engine', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicineAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medicine_name', models.CharField(max_length=100)),
                ('dosage', models.CharField(help_text="e.g., '10mg', '2 tablets'", max_length=50)),
                ('form', models.CharField(default='tablet', help_text='tablet, capsule, liquid, injection, etc.', max_length=30)),
                ('instructions', models.TextField(blank=True, help_text='Special instructions for taking the medicine')),
                ('alert_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('as_needed', 'As Needed'), ('custom', 'Custom Schedule')], default='daily', max_length=15)),
                ('times_per_day', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('alert_times', models.JSONField(default=list, help_text="List of times in HH:MM format, e.g., ['08:00', '14:00', '20:00']")),
                ('custom_schedule', models.JSONField(blank=True, default=dict, help_text='Custom schedule configuration for complex patterns')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('reminder_before_minutes', models.IntegerField(default=0, help_text='Minutes before scheduled time to send reminder', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('snooze_duration', models.IntegerField(default=15, help_text='Snooze duration in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, help_text='Leave blank for ongoing medication', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=15)),
                ('is_enabled', models.BooleanField(default=True)),
                ('enable_ai_nudges', models.BooleanField(default=True, help_text='Enable AI-generated contextual nudges for this medication')),
                ('ai_context', models.JSONField(blank=True, default=dict, help_text='Context data for AI nudge generation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_medicine_alerts', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicine_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medicine Alert',
                'verbose_name_plural': 'Medicine Alerts',
                'db_table': 'ai_medicine_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIHealthNudge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nudge_type', models.CharField(choices=[('medicine_reminder', 'Medicine Reminder'), ('adherence_encouragement', 'Adherence Encouragement'), ('side_effect_guidance', 'Side Effect Guidance'), ('lifestyle_suggestion', 'Lifestyle Suggestion'), ('motivation', 'Motivational Message'), ('educational', 'Educational Content'), ('appointment_reminder', 'Appointment Reminder')], max_length=25)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField(help_text='AI-generated personalized message')),
                ('action_suggestion', models.CharField(blank=True, max_length=200)),
                ('model_used', models.CharField(default='WebLLM-Local', max_length=50)),
                ('prompt_context', models.JSONField(default=dict, help_text='Context data used to generate the nudge')),
                ('generation_tokens', models.IntegerField(default=0, help_text='Number of tokens generated')),
                ('generation_time_ms', models.IntegerField(default=0, help_text='Time taken to generate (ms)')),
                ('patient_history', models.JSONField(default=dict, help_text='Patient history factors considered')),
                ('current_context', models.JSONField(default=dict, help_text='Current situational context')),
                ('behavioral_patterns', models.JSONField(default=dict, help_text='Patient behavioral patterns identified')),
                ('status', models.CharField(choices=[('generated', 'Generated'), ('delivered', 'Delivered'), ('viewed', 'Viewed'), ('acted_upon', 'Acted Upon'), ('dismissed', 'Dismissed'), ('expired', 'Expired')], default='generated', max_length=15)),
                ('delivery_method', models.CharField(choices=[('dashboard_toast', 'Dashboard Toast'), ('dashboard_card', 'Dashboard Card'), ('modal', 'Modal Dialog'), ('notification', 'Browser Notification'), ('email', 'Email')], default='dashboard_toast', max_length=20)),
                ('scheduled_for', models.DateTimeField(help_text='When to deliver this nudge')),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('acted_upon_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(help_text='When this nudge expires')),
                ('user_rating', models.IntegerField(blank=True, help_text='User rating of nudge helpfulness (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('led_to_action', models.BooleanField(default=False)),
                ('action_type', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_nudges', to=settings.AUTH_USER_MODEL)),
                ('medicine_alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_nudges', to='ai_engine.medicinealert')),
            ],
            options={
                'verbose_name': 'AI Health Nudge',
                'verbose_name_plural': 'AI Health Nudges',
                'db_table': 'ai_health_nudges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicineIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField(help_text='When the medicine was scheduled to be taken')),
                ('actual_time', models.DateTimeField(blank=True, help_text='When the medicine was actually taken', null=True)),
                ('status', models.CharField(choices=[('taken', 'Taken'), ('missed', 'Missed'), ('partial', 'Partial'), ('late', 'Late'), ('skipped', 'Intentionally Skipped')], max_length=15)),
                ('dosage_taken', models.CharField(blank=True, help_text='Actual dosage taken if different from scheduled', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Patient notes about this intake')),
                ('side_effects', models.TextField(blank=True, help_text='Any side effects experienced')),
                ('mood_before', models.IntegerField(blank=True, help_text='Mood rating before taking medicine (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('mood_after', models.IntegerField(blank=True, help_text='Mood rating after taking medicine (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ai_nudge_used', models.BooleanField(default=False, help_text='Was an AI nudge involved in this intake?')),
                ('nudge_effectiveness', models.IntegerField(blank=True, help_text='How effective was the AI nudge? (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intake_records', to='ai_engine.medicinealert')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicine_intakes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medicine Intake',
                'verbose_name_plural': 'Medicine Intakes',
                'db_table': 'ai_medicine_intakes',
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='WebLLMSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('medicine_consultation', 'Medicine Consultation'), ('nudge_generation', 'Nudge Generation'), ('health_education', 'Health Education'), ('symptom_analysis', 'Symptom Analysis'), ('general_chat', 'General Health Chat')], max_length=25)),
                ('model_id', models.CharField(help_text='WebLLM model identifier used', max_length=100)),
                ('model_size', models.CharField(help_text="Model size (e.g., '1B', '3B')", max_length=20)),
                ('session_start', models.DateTimeField(auto_now_add=True)),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('total_messages', models.IntegerField(default=0)),
                ('total_tokens_generated', models.IntegerField(default=0)),
                ('average_response_time_ms', models.IntegerField(default=0)),
                ('total_generation_time_ms', models.IntegerField(default=0)),
                ('initial_prompt', models.TextField(blank=True)),
                ('conversation_summary', models.TextField(blank=True)),
                ('user_rating', models.IntegerField(blank=True, help_text='User rating of session helpfulness (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('browser_info', models.JSONField(default=dict)),
                ('device_info', models.JSONField(default=dict)),
                ('performance_stats', models.JSONField(default=dict)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webllm_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'WebLLM Session',
                'verbose_name_plural': 'WebLLM Sessions',
                'db_table': 'ai_webllm_sessions',
                'ordering': ['-session_start'],
            },
        ),
    ]
