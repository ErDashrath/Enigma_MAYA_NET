# Generated by Django 5.2.6 on 2025-09-20 07:14

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=50)),
                ('model_version', models.CharField(max_length=20)),
                ('accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('f1_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('evaluation_period_start', models.DateTimeField()),
                ('evaluation_period_end', models.DateTimeField()),
                ('sample_size', models.IntegerField()),
                ('training_data_size', models.IntegerField()),
                ('feature_count', models.IntegerField()),
                ('deployment_date', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Model Performance',
                'verbose_name_plural': 'Model Performance Records',
                'db_table': 'ai_model_performance',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(choices=[('blood_pressure_spike', 'Blood Pressure Spike'), ('medication_nonadherence', 'Medication Non-adherence'), ('symptom_flare', 'Symptom Flare-up'), ('emergency_risk', 'Emergency Risk'), ('hospitalization', 'Hospitalization Risk'), ('general_deterioration', 'General Health Deterioration')], max_length=30)),
                ('time_horizon', models.CharField(choices=[('24h', 'Next 24 Hours'), ('7d', 'Next 7 Days'), ('30d', 'Next 30 Days'), ('90d', 'Next 90 Days')], max_length=5)),
                ('probability', models.FloatField(help_text='Predicted probability (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confidence', models.FloatField(help_text='Model confidence (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('predicted_value', models.FloatField(blank=True, help_text='Predicted numerical value if applicable', null=True)),
                ('description', models.TextField(help_text='Human-readable prediction description')),
                ('key_factors', models.JSONField(default=list, help_text='Key factors influencing this prediction')),
                ('data_points_used', models.JSONField(default=dict, help_text='Summary of data points used')),
                ('model_name', models.CharField(max_length=50)),
                ('model_version', models.CharField(max_length=20)),
                ('actual_outcome', models.BooleanField(blank=True, help_text='Did the prediction come true?', null=True)),
                ('outcome_recorded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this prediction expires')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_predictions', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Health Prediction',
                'verbose_name_plural': 'Health Predictions',
                'db_table': 'ai_health_predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SmartNudge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('medication', 'Medication Reminder'), ('lifestyle', 'Lifestyle Suggestion'), ('exercise', 'Exercise Recommendation'), ('diet', 'Dietary Advice'), ('stress', 'Stress Management'), ('sleep', 'Sleep Hygiene'), ('appointment', 'Appointment Reminder'), ('monitoring', 'Health Monitoring'), ('emergency', 'Emergency Alert')], max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('action_text', models.CharField(blank=True, help_text='Call-to-action button text', max_length=50)),
                ('action_url', models.URLField(blank=True, help_text='URL for action button')),
                ('personalization_factors', models.JSONField(default=dict, help_text='Factors used for personalization')),
                ('target_behavior', models.CharField(help_text='Target behavior to influence', max_length=100)),
                ('delivery_method', models.CharField(choices=[('dashboard', 'Dashboard'), ('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App Notification')], default='dashboard', max_length=20)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('user_feedback', models.IntegerField(blank=True, help_text='User feedback rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('outcome_achieved', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this nudge expires')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smart_nudges', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Smart Nudge',
                'verbose_name_plural': 'Smart Nudges',
                'db_table': 'ai_smart_nudges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StabilityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Stability score (0-100, higher is better)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=10)),
                ('vital_signs_score', models.FloatField(default=0.0, help_text='Vital signs component score')),
                ('lifestyle_score', models.FloatField(default=0.0, help_text='Lifestyle factors component score')),
                ('medication_adherence_score', models.FloatField(default=0.0, help_text='Medication adherence score')),
                ('symptom_burden_score', models.FloatField(default=0.0, help_text='Symptom burden score')),
                ('identified_risks', models.JSONField(default=list, help_text='List of identified risk factors')),
                ('risk_probability', models.FloatField(help_text='Probability of adverse event (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('model_version', models.CharField(default='1.0', max_length=20)),
                ('calculation_method', models.CharField(default='rule_based', max_length=50)),
                ('confidence_level', models.FloatField(help_text='Model confidence (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('data_freshness', models.DateTimeField(help_text='Timestamp of most recent data used')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stability_scores', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Stability Score',
                'verbose_name_plural': 'Stability Scores',
                'db_table': 'ai_stability_scores',
                'ordering': ['-calculated_at'],
            },
        ),
    ]
