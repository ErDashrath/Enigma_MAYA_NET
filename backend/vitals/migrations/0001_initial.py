# Generated by Django 5.2.6 on 2025-09-20 07:14

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LifestyleMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stress_level', models.IntegerField(blank=True, choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], help_text='Stress level (1-5 scale)', null=True)),
                ('mood_rating', models.IntegerField(blank=True, help_text='Mood rating (1-10 scale)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('sleep_hours', models.FloatField(blank=True, help_text='Hours of sleep', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(24.0)])),
                ('sleep_quality', models.IntegerField(blank=True, choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Fair'), (4, 'Good'), (5, 'Excellent')], help_text='Sleep quality (1-5 scale)', null=True)),
                ('sodium_intake', models.FloatField(blank=True, help_text='Sodium intake (mg)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10000.0)])),
                ('water_intake', models.FloatField(blank=True, help_text='Water intake (ounces)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(200.0)])),
                ('calorie_intake', models.IntegerField(blank=True, help_text='Calorie intake', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('exercise_minutes', models.IntegerField(blank=True, help_text='Exercise minutes', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1440)])),
                ('steps_count', models.IntegerField(blank=True, help_text='Daily steps count', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000)])),
                ('medication_taken', models.BooleanField(blank=True, help_text='Medications taken as prescribed', null=True)),
                ('missed_doses', models.IntegerField(default=0, help_text='Number of missed medication doses')),
                ('recorded_at', models.DateTimeField()),
                ('notes', models.TextField(blank=True, help_text='Additional lifestyle notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifestyle_metrics', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Lifestyle Metrics',
                'verbose_name_plural': 'Lifestyle Metrics',
                'db_table': 'vitals_lifestyle_metrics',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='SymptomReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symptom_name', models.CharField(help_text='Name of the symptom', max_length=100)),
                ('description', models.TextField(help_text='Detailed description of the symptom')),
                ('severity', models.IntegerField(choices=[(1, 'Mild'), (2, 'Moderate'), (3, 'Severe'), (4, 'Very Severe'), (5, 'Emergency')], help_text='Severity level (1-5)')),
                ('onset_time', models.DateTimeField(help_text='When the symptom started')),
                ('duration_hours', models.FloatField(blank=True, help_text='Duration of symptom in hours', null=True)),
                ('triggers', models.TextField(blank=True, help_text='Possible triggers')),
                ('relieving_factors', models.TextField(blank=True, help_text='What helps relieve the symptom')),
                ('associated_symptoms', models.TextField(blank=True, help_text='Other related symptoms')),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('reported_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symptom_reports', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Symptom Report',
                'verbose_name_plural': 'Symptom Reports',
                'db_table': 'vitals_symptom_reports',
                'ordering': ['-reported_at'],
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('systolic_bp', models.IntegerField(blank=True, help_text='Systolic blood pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(300)])),
                ('diastolic_bp', models.IntegerField(blank=True, help_text='Diastolic blood pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(200)])),
                ('heart_rate', models.IntegerField(blank=True, help_text='Heart rate (beats per minute)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)])),
                ('temperature', models.FloatField(blank=True, help_text='Body temperature (Â°F)', null=True, validators=[django.core.validators.MinValueValidator(90.0), django.core.validators.MaxValueValidator(110.0)])),
                ('weight', models.FloatField(blank=True, help_text='Weight (lbs)', null=True, validators=[django.core.validators.MinValueValidator(50.0), django.core.validators.MaxValueValidator(1000.0)])),
                ('oxygen_saturation', models.IntegerField(blank=True, help_text='Oxygen saturation (%)', null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('respiratory_rate', models.IntegerField(blank=True, help_text='Respiratory rate (breaths per minute)', null=True, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(40)])),
                ('measured_at', models.DateTimeField()),
                ('source', models.CharField(choices=[('manual', 'Manual Entry'), ('device', 'Medical Device'), ('wearable', 'Wearable Device'), ('clinic', 'Clinic Measurement')], default='manual', max_length=10)),
                ('device_info', models.JSONField(blank=True, default=dict, help_text='Device information if applicable')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about measurements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Vital Signs',
                'verbose_name_plural': 'Vital Signs',
                'db_table': 'vitals_signs',
                'ordering': ['-measured_at'],
            },
        ),
    ]
