# Generated by Django 5.2.6 on 2025-09-20 11:16

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('patients', '0001_initial'),
        ('vitals', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='lifestylemetrics',
            name='activity_level',
            field=models.IntegerField(blank=True, choices=[(1, 'Sedentary'), (2, 'Lightly Active'), (3, 'Moderately Active'), (4, 'Very Active'), (5, 'Extra Active')], help_text='Overall activity level (1-5 scale)', null=True),
        ),
        migrations.AddField(
            model_name='lifestylemetrics',
            name='food_log',
            field=models.JSONField(blank=True, default=dict, help_text='Daily food intake by category {category: servings}'),
        ),
        migrations.AddField(
            model_name='lifestylemetrics',
            name='medication_adherence_percentage',
            field=models.FloatField(blank=True, help_text='Medication adherence percentage (0-100%)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='vitalsigns',
            name='blood_glucose',
            field=models.IntegerField(blank=True, help_text='Blood glucose level (mg/dL)', null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(600)]),
        ),
        migrations.AddField(
            model_name='vitalsigns',
            name='height',
            field=models.FloatField(blank=True, help_text='Height (inches)', null=True, validators=[django.core.validators.MinValueValidator(36.0), django.core.validators.MaxValueValidator(96.0)]),
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chronic_conditions', models.JSONField(default=list, help_text='List of chronic conditions patient has')),
                ('past_episodes', models.JSONField(default=list, help_text='List of past medical episodes with dates and details')),
                ('family_history', models.JSONField(blank=True, default=dict, help_text='Family medical history by condition')),
                ('risk_factors', models.JSONField(default=list, help_text='Additional risk factors (smoking, alcohol, etc.)')),
                ('allergies', models.JSONField(default=list, help_text='Known allergies and adverse reactions')),
                ('current_medications', models.JSONField(default=list, help_text='List of current medications with dosages')),
                ('notes', models.TextField(blank=True, help_text='Additional medical history notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_history', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Medical History',
                'verbose_name_plural': 'Medical Histories',
                'db_table': 'vitals_medical_history',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stability_score', models.FloatField(help_text='Stability score (0-100, higher is more stable)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk (0-25%)'), ('moderate', 'Moderate Risk (25-50%)'), ('high', 'High Risk (50-75%)'), ('critical', 'Critical Risk (75-100%)')], max_length=10)),
                ('time_horizon', models.CharField(choices=[('24h', 'Next 24 Hours'), ('48h', 'Next 48 Hours'), ('7d', 'Next 7 Days'), ('30d', 'Next 30 Days')], default='48h', max_length=5)),
                ('adverse_event_risk', models.BooleanField(help_text='High risk of adverse event in time horizon (0=stable, 1=high risk)')),
                ('adverse_event_probability', models.FloatField(help_text='Probability of adverse event (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('vital_signs_score', models.FloatField(default=0.0, help_text='Vital signs component score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('lifestyle_score', models.FloatField(default=0.0, help_text='Lifestyle factors component score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('medication_adherence_score', models.FloatField(default=0.0, help_text='Medication adherence score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('risk_factors', models.JSONField(default=list, help_text='List of identified risk factors contributing to score')),
                ('model_version', models.CharField(default='1.0', max_length=20)),
                ('calculation_method', models.CharField(default='rule_based', max_length=50)),
                ('confidence_level', models.FloatField(help_text='Model confidence in prediction (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('data_points_used', models.JSONField(default=dict, help_text='Summary of data points used in calculation')),
                ('recommendations', models.JSONField(default=list, help_text='AI-generated recommendations to improve stability')),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this assessment expires')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='patients.patientprofile')),
            ],
            options={
                'verbose_name': 'Risk Assessment',
                'verbose_name_plural': 'Risk Assessments',
                'db_table': 'vitals_risk_assessments',
                'ordering': ['-calculated_at'],
            },
        ),
    ]
